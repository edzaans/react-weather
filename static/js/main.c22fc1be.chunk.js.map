{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","name","id","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAKMA,EACC,mCADDA,EAEE,0CAqHOC,MAhHf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAwDA,OACE,qBAEEC,UACyB,oBAAhBF,EAAQG,MACXH,EAAQG,KAAKC,KAAO,GAClB,WAEF,MAPR,SAWE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,KAAK,GACLC,GAAG,GACHC,YAAY,YAEZC,SAAU,SAACC,GACT,OAAOX,EAASW,EAAEC,OAAOC,QAE3BA,MAAOd,EAEPe,WA/EK,SAACC,GAEI,UAAdA,EAAMC,KAERC,MAAM,GAAD,OAAIrB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDsB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLnB,EAAWmB,GACXrB,EAAS,IAETsB,QAAQC,IAAIF,EAAOd,cAyEG,oBAAhBN,EAAQG,KAEd,gCACE,sBAAKD,UAAU,qBAAf,UACE,sBAAKA,UAAU,WAAf,UACGF,EAAQM,KADX,KACmBN,EAAQuB,IAAIC,WAE/B,qBAAKtB,UAAU,OAAf,SA1EQ,SAACuB,GACnB,IA0BIC,EAXS,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAIaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA5BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAgBiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAGb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAyCDE,CAAY,IAAIC,WAEzC,sBAAKjC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBkC,KAAKC,MAAMrC,EAAQG,KAAKC,MAA/C,OACA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,aAIjD,SCzGKmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.c22fc1be.chunk.js","sourcesContent":["// Import React and useState\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\n// Declare api object with base URL and API key\nconst api = {\n  key: \"b62b1c5840125235c66e675bf10ce482\",\n  base: \"http://api.openweathermap.org/data/2.5/\",\n};\n\n// ------------------ Main function ----------------------\n\nfunction App() {\n  // Create state for search query\n  const [query, setQuery] = useState(\"\");\n  // Create state for weather Object\n  const [weather, setWeather] = useState({});\n\n  // Declare Search event\n  const search = (event) => {\n    // Set event on key press\n    if (event.key === \"Enter\") {\n      // Fetch data from API using \"api object\" declared above\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery(\"\");\n          // Console log for troubleshooting returned data\n          console.log(result.name);\n        });\n    }\n  };\n\n  //Declare months\n  const dateBuilder = (d) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    // Declare days\n    const days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    // Assign returned data to variables\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    // Returns current date as a string\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  // Main return function\n  return (\n    <div\n      // Check if search field is NOT empty, assign CSS classes accordingly\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.main.temp > 15\n            ? \"app warm\"\n            : \"app\"\n          : \"app\"\n      }\n    >\n      {/* Create HTML elements */}\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            name=\"\"\n            id=\"\"\n            placeholder=\"Search...\"\n            /* Set query value from search bar with entered value */\n            onChange={(e) => {\n              return setQuery(e.target.value);\n            }}\n            value={query}\n            /* Run search function on key press */\n            onKeyPress={search}\n          />\n        </div>\n        {/* Check if returned data object is NOT empty */}\n        {typeof weather.main != \"undefined\" ? (\n          /* Display returned data */\n          <div>\n            <div className=\"location-container\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">{Math.round(weather.main.temp)}c</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}